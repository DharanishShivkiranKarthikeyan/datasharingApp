import{getAuth as le,onAuthStateChanged as Q,setPersistence as de,browserLocalPersistence as ue,GoogleAuthProvider as X,signInWithPopup as ee,signOut as he}from"https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js";import{getFirestore as pe,getDocs as _,collection as M,doc as D,setDoc as R,updateDoc as H,increment as ge,getDoc as te}from"https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore.js";import"https://cdn.jsdelivr.net/npm/crypto-js@4.2.0/+esm";import fe from"https://cdn.jsdelivr.net/npm/peerjs@1.5.4/+esm";import{initializeApp as ye}from"https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";import"https://cdnjs.cloudflare.com/ajax/libs/three.js/r121/three.min.js";import"https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.birds.min.js";import"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.1.9/p5.min.js";import"https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.topology.min.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))n(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&n(i)}).observe(document,{childList:!0,subtree:!0});function t(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerPolicy&&(s.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?s.credentials="include":o.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(o){if(o.ep)return;o.ep=!0;const s=t(o);fetch(o.href,s)}})();const me="modulepreload",we=function(r){return"/datasharingApp/"+r},W={},be=function(e,t,n){let o=Promise.resolve();if(t&&t.length>0){document.getElementsByTagName("link");const i=document.querySelector("meta[property=csp-nonce]"),a=(i==null?void 0:i.nonce)||(i==null?void 0:i.getAttribute("nonce"));o=Promise.allSettled(t.map(c=>{if(c=we(c),c in W)return;W[c]=!0;const l=c.endsWith(".css"),u=l?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${c}"]${u}`))return;const p=document.createElement("link");if(p.rel=l?"stylesheet":me,l||(p.as="script"),p.crossOrigin="",p.href=c,a&&p.setAttribute("nonce",a),document.head.appendChild(p),l)return new Promise((m,k)=>{p.addEventListener("load",m),p.addEventListener("error",()=>k(new Error(`Unable to preload CSS for ${c}`)))})}))}function s(i){const a=new Event("vite:preloadError",{cancelable:!0});if(a.payload=i,window.dispatchEvent(a),!a.defaultPrevented)throw i}return o.then(i=>{for(const a of i||[])a.status==="rejected"&&s(a.reason);return e().catch(s)})},ke={apiKey:"AIzaSyBrdrwvY-lPObZgortEgw7YWycUOGsBlyM",authDomain:"dcrypt-edb9c.firebaseapp.com",projectId:"dcrypt-edb9c",storageBucket:"dcrypt-edb9c.firebasestorage.app",messagingSenderId:"952133736604",appId:"1:952133736604:web:32d799360f200bce84f559",measurementId:"G-7KCDLQ6JNH"},ne=ye(ke),Ie=le(ne),oe=pe(ne),Be=Object.freeze(Object.defineProperty({__proto__:null,auth:Ie,db:oe},Symbol.toStringTag,{value:"Module"}));var Z;const E=(Z=globalThis.crypto)==null?void 0:Z.subtle;if(!E)throw new Error("Web Crypto API is not available in this environment");function ve(){const r=new Uint8Array(12);for(let e=0;e<12;e++)r[e]=Math.floor(Math.random()*256);return r}function Se(r,e,t,n,o,s,i){return{content:new Uint8Array(r),content_type:e,tags:t||[],is_premium:n,price_usd:o,creator_id:new Uint8Array(s),file_type:i}}function Pe(r){return r.content}async function re(r){const e=await E.digest("SHA-256",r);return new Uint8Array(e)}async function xe(r,e,t){const n=r.content,o=Math.ceil(n.length/t),s=[],i=await E.importKey("raw",new Uint8Array(e.slice(0,128)),{name:"AES-GCM"},!1,["encrypt"]);for(let a=0;a<t;a++){const c=a*o,l=Math.min(c+o,n.length),u=n.slice(c,l),p=ve(),m=await E.encrypt({name:"AES-GCM",iv:p},i,u),k={data:new Uint8Array(m),nonce:p,index:a,file_type:r.file_type};s.push(k)}return s}function De(r){const e=new Uint8Array(new Int32Array([r.index]).buffer),t=new Uint8Array([...r.data,...r.nonce,...e]);return re(t)}function K(r){return r.index}async function Ee(r,e){const t=await E.importKey("raw",new Uint8Array(e.slice(0,32)),{name:"AES-GCM"},!1,["decrypt"]),n=await E.decrypt({name:"AES-GCM",iv:r.nonce},t,r.data);return new Uint8Array(n)}function Ce(r){return r.file_type}class Ae{constructor(e,t=!1){this.peers=new Map,this.channels=new Map,this.knownObjects=new Map,this.chunkToPeerMap=new Map,this.pendingRequests=new Map,this.db=null,this.keypair=e,this.activeNodes=new Set,this.nodes=new Set,this.offlineQueue=[],this.isNode=t,this.peerId=null,this.peer=null,this.connectionAttempts=new Map,this.maxConnectionAttempts=3,this.connectionRetryDelay=5e3,this.averageLatency=0,console.log("DHT initialized with keypair:",e),console.log("Keypair length:",e.length),console.log("Keypair suitability:",e.length<=40?"Good":"Warning (large keypair)"),this.initializeKnownNodes()}async initializeKnownNodes(){const e=async()=>{try{const t=await _(M(oe,"nodes"));this.nodes.clear(),t.empty?console.warn("No nodes found in Firestore. Using empty node list."):t.forEach(n=>{const o=`node-${n.id}`;this.nodes.add(o)}),console.log("Fetched nodes:",Array.from(this.nodes))}catch(t){console.error("Failed to fetch nodes from Firestore:",t),this.nodes.clear(),console.warn("No nodes available. Peer discovery will be limited to regular peers.")}};await e(),setInterval(e,5*60*1e3)}async measureLatency(){const e=[],t=Array.from(this.activeNodes).slice(0,5);for(const n of t){const o=this.peers.get(n);if(o&&o.connected&&o.conn){const s=Date.now();await new Promise(a=>{const c=`${n}-ping-${Date.now()}`;o.conn.send({type:"ping",requestId:c}),this.pendingRequests.set(c,{resolve:a}),setTimeout(()=>{this.pendingRequests.has(c)&&(this.pendingRequests.delete(c),a())},2e3)});const i=Date.now()-s;e.push(i)}}this.averageLatency=e.length>0?e.reduce((n,o)=>n+o,0)/e.length:0,console.log(`Average latency: ${this.averageLatency} ms`)}async initDB(){return new Promise((e,t)=>{console.log("Starting DHT database initialization...");const o=indexedDB.open("dcrypt_db",5);let s;o.onupgradeneeded=i=>{console.log("Upgrading DHT database to version",5),s=o.result,s.objectStoreNames.contains("store")||(s.createObjectStore("store",{keyPath:"id"}),console.log("Created object store: store in dht.js")),s.objectStoreNames.contains("transactions")||(s.createObjectStore("transactions",{keyPath:"id",autoIncrement:!0}),console.log("Created object store: transactions in dht.js")),s.objectStoreNames.contains("offlineQueue")||(s.createObjectStore("offlineQueue",{keyPath:"id",autoIncrement:!0}),console.log("Created object store: offlineQueue in dht.js")),s.objectStoreNames.contains("chunkCache")||(s.createObjectStore("chunkCache",{keyPath:"id"}),console.log("Created object store: chunkCache in dht.js")),console.log("DHT database upgrade completed")},o.onsuccess=()=>{s=o.result,console.log("DHT IndexedDB opened at version",s.version);const a=["store","transactions","offlineQueue","chunkCache"].filter(c=>!s.objectStoreNames.contains(c));a.length>0?(console.error("Missing stores after upgrade:",a),t(new Error(`Database upgrade failed: missing stores ${a.join(", ")}`))):(this.db=s,console.log("All required stores present, proceeding with DHT initialization"),e())},o.onerror=i=>{console.error("Failed to open DHT IndexedDB:",i.target.error),t(new Error(`Failed to open IndexedDB: ${i.target.error.message}`))}})}async syncUserData(){if(!this.db)throw new Error("IndexedDB not initialized");try{await this.dbPut("store",{id:"dcrypt_identity",value:this.keypair}),await this.updateBalance(),this.activeNodes.size>0&&await this.processOfflineQueue();const e={type:"userData",peerId:this.peerId,keypair:this.keypair,balance:await this.getBalance(this.keypair),timestamp:Date.now()};this.broadcast(e),console.log("User data synced successfully")}catch(e){throw console.error("Sync failed:",e),e}}async saveUserData(){if(!this.db)throw new Error("IndexedDB not initialized");try{await this.dbPut("store",{id:"dcrypt_identity",value:this.keypair}),await this.updateBalance(),console.log("User data saved to IndexedDB")}catch(e){throw console.error("Save failed:",e),e}}async initSwarm(){try{return this.peerId=this.isNode?`node-${this.keypair}`:this.keypair,console.log("Initializing PeerJS with Peer ID:",this.peerId),this.peer=new fe(this.peerId,{host:"0.peerjs.com",port:443,path:"/",secure:!0,debug:2}),await new Promise((e,t)=>{this.peer.on("open",n=>{console.log(`PeerJS connection opened with ID: ${n}`),this.activeNodes.add(this.peerId),this.peer.on("connection",o=>{this.handleConnection(o)}),this.peer.on("error",o=>{var s;if(console.error("PeerJS error:",o.type,o.message),o.type==="peer-unavailable"){const i=(s=o.message.match(/Peer (.+) is unavailable/))==null?void 0:s[1];i&&this.handlePeerDisconnect(i)}}),this.peer.on("disconnected",()=>{console.log("PeerJS disconnected. Attempting to reconnect..."),this.peer.reconnect()}),window.addEventListener("beforeunload",()=>{this.peer&&!this.peer.destroyed&&(this.peer.destroy(),console.log("PeerJS peer destroyed on page unload"))}),setInterval(()=>this.discoverPeers(),5e3),setInterval(()=>this.measureLatency(),6e4),e()}),this.peer.on("error",n=>{console.error("PeerJS initialization error:",n),t(n)})})}catch(e){throw console.error("initSwarm failed:",e),e}}discoverPeers(){console.log("Discovering peers..."),console.log("My peer ID:",this.peerId),console.log("Known peer IDs:",Array.from(this.nodes));const e=[...Array.from(this.nodes)].filter(t=>t!==this.peerId);if(e.length===0){console.warn("No known peers to connect to. Waiting for nodes to be discovered.");return}e.forEach(t=>{this.peers.has(t)||(this.peers.set(t,{connected:!1,conn:null}),console.log("Discovered peer:",t),this.connectToPeer(t))}),this.peers.forEach((t,n)=>{!t.connected&&this.connectionAttempts.get(n)>=this.maxConnectionAttempts&&(console.log(`Removing unreachable peer: ${n}`),this.peers.delete(n),this.connectionAttempts.delete(n),this.activeNodes.delete(n))})}connectToPeer(e){var o;if((o=this.peers.get(e))!=null&&o.connected)return;const t=this.connectionAttempts.get(e)||0;if(t>=this.maxConnectionAttempts)return;console.log(`Attempting to connect to peer: ${e} (Attempt ${t+1}/${this.maxConnectionAttempts})`);const n=this.peer.connect(e,{reliable:!0});n.on("open",()=>{console.log(`Connected to peer: ${e}`),this.peers.set(e,{connected:!0,conn:n}),this.activeNodes.add(e),this.connectionAttempts.delete(e),n.send({type:"handshake",peerId:this.peerId})}),n.on("data",s=>{this.handlePeerData(s,e)}),n.on("close",()=>{console.log(`Connection closed with peer: ${e}`),this.handlePeerDisconnect(e)}),n.on("error",s=>{console.warn(`Connection error with peer ${e}: ${s.message}`),this.handlePeerDisconnect(e)}),this.connectionAttempts.set(e,t+1)}handleConnection(e){const t=e.peer;console.log(`Incoming connection from peer: ${t}`),this.peers.set(t,{connected:!0,conn:e}),this.activeNodes.add(t),e.on("data",n=>{this.handlePeerData(n,t)}),e.on("close",()=>{console.log(`Connection closed with peer: ${t}`),this.handlePeerDisconnect(t)}),e.on("error",n=>{console.error(`Connection error with peer ${t}:`,n),this.handlePeerDisconnect(t)})}handlePeerDisconnect(e){const t=this.peers.get(e);t&&(t.connected=!1,t.conn=null,this.activeNodes.delete(e),console.log(`Peer disconnected: ${e}. Will attempt to reconnect on next discovery.`))}handlePeerData(e,t){switch(console.log(`Received data from peer ${t}:`,e),e.type){case"handshake":console.log(`Handshake received from peer: ${t}`),this.activeNodes.add(t);break;case"chunk":this.chunkToPeerMap.set(e.chunkHash,new Set([...this.chunkToPeerMap.get(e.chunkHash)||[],t])),console.log(`Updated chunkToPeerMap for chunk ${e.chunkHash} with peer ${t}`);break;case"ip":this.knownObjects.set(e.ipHash,{metadata:e.metadata,chunks:e.chunkHashes}),this.dbPut("store",{id:e.ipHash,value:JSON.stringify({metadata:e.metadata,chunks:e.chunkHashes})}),console.log(`Received IP ${e.ipHash} from peer ${t}`);break;case"chunkRequest":this.handleChunkRequest(e,t);break;case"chunkResponse":this.handleChunkResponse(e);break;case"userData":console.log(`Received user data from peer ${t}:`,e);break;case"storeChunk":this.storeChunkFromPeer(e.chunkHash,e.chunkData,t);break;case"ping":const n=this.peers.get(t);n&&n.connected&&n.conn&&n.conn.send({type:"pong",requestId:e.requestId});break;case"pong":const o=this.pendingRequests.get(e.requestId);o&&(o.resolve(),this.pendingRequests.delete(e.requestId));break;case"commission":console.log(`Received commission of ${e.amount}. New balance: ${e.newBalance}`);break;default:console.warn(`Unknown data type received from peer ${t}:`,e.type)}}async storeChunkFromPeer(e,t,n){try{await this.dbPut("chunkCache",{id:e,value:t});let o=this.chunkToPeerMap.get(e)||new Set;o.add(this.peerId),this.chunkToPeerMap.set(e,o),console.log(`Stored chunk ${e} from peer ${n}`)}catch(o){console.error(`Failed to store chunk ${e} from peer ${n}:`,o)}}async publishChunk(e,t,n,o){if(!this.db)throw new Error("IndexedDB not initialized");try{if(console.log("publishChunk: chunkHash=",e,"chunkData=",t),!e||typeof e!="string"||e.trim()==="")throw new Error("Invalid chunk hash");await this.dbPut("chunkCache",{id:e,value:t});let s=this.chunkToPeerMap.get(e)||new Set;if(s.add(this.peerId),this.chunkToPeerMap.set(e,s),this.activeNodes.size>0){const i=Array.from(this.activeNodes).filter(c=>c.startsWith("node-"));if(i.length>0){const c=n%i.length,l=i[c],u=this.peers.get(l);u&&u.connected&&u.conn&&(u.conn.send({type:"storeChunk",chunkHash:e,chunkData:t,peerId:this.peerId}),s.add(l),this.chunkToPeerMap.set(e,s),console.log(`Sent chunk ${e} to node ${l}`))}const a=Array.from(this.activeNodes).filter(c=>!c.startsWith("node-")&&c!==this.peerId);if(a.length>0){const c=a[Math.floor(Math.random()*a.length)],l=this.peers.get(c);l&&l.connected&&l.conn&&(l.conn.send({type:"storeChunk",chunkHash:e,chunkData:t,peerId:this.peerId}),s.add(c),this.chunkToPeerMap.set(e,s),console.log(`Sent chunk ${e} to random peer ${c}`))}}else await this.queueOfflineOperation({type:"publishChunk",chunkHash:e,chunkData:t,chunkIndex:n,totalChunks:o});this.broadcastChunk(e)}catch(s){throw console.error("publishChunk failed:",s),s}}broadcastChunk(e){const t={type:"chunk",chunkHash:e,peerId:this.peerId};this.broadcast(t),console.log(`Broadcasted chunk ${e} to ${this.activeNodes.size} peers`)}async publishIP(e,t,n){if(!this.db)throw new Error("IndexedDB not initialized");if(!this.keypair)throw new Error("Keypair not initialized");try{const o=Array.isArray(e.tags)?e.tags.map(f=>String(f).trim()).filter(f=>f!==""):[];console.log("Processed tags:",o);const s=!!e.isPremium,i=s?e.priceUsd||30:0,a=new Uint8Array(t),c=e.content_type||"",l=this.keypair,p=Se(a,c,o,s,i,l,n||"text/plain"),m=Pe(p),k=await re(m),I=this.uint8ArrayToBase64Url(k),v=Array.from(this.activeNodes).filter(f=>f.startsWith("node-")),w=v.length>0?v.length:1,b=await xe(p,Array.from(this.keypair),w),S=[];for(let f=0;f<b.length;f++){const z=b[f],O=await De(z),ce=this.uint8ArrayToBase64Url(O);S.push(ce)}const P={...e,chunk_count:b.length,isPremium:s,priceUsd:s?i:0},N={metadata:P,chunks:S};this.knownObjects.set(I,N),await this.dbPut("store",{id:I,value:JSON.stringify(N)});for(let f=0;f<b.length;f++){const z=b[f],O=S[f];await this.publishChunk(O,z,f,b.length)}return this.activeNodes.size>0?this.broadcastIP(I,P,S):await this.queueOfflineOperation({type:"publishIP",ipHash:I,metadata:P,chunkHashes:S}),I}catch(o){throw console.error("publishIP failed:",o),o}}broadcastIP(e,t,n){const o={type:"ip",ipHash:e,metadata:t,chunkHashes:n,peerId:this.peerId};this.broadcast(o),console.log(`Broadcasted IP ${e} to ${this.activeNodes.size} peers`)}async requestData(e){if(!this.db)throw new Error("IndexedDB not initialized");try{if(!e||typeof e!="string")throw new Error("Invalid IP hash");const t=this.knownObjects.get(e);if(!t)throw new Error("IP not found");const n=[];for(const l of t.chunks){const u=await this.dbGet("chunkCache",l);if(u&&u.value){n.push({chunk:u.value,hash:l});continue}const p=this.chunkToPeerMap.get(l);if(!p||p.size===0)throw new Error(`No peers found with chunk ${l}`);const m=Array.from(p).filter(w=>w.startsWith("node-")),k=Array.from(p).filter(w=>!w.startsWith("node-"));let I=!1,v=null;for(const w of[...m,...k])if(this.activeNodes.has(w))try{const b=await this.fetchChunkFromPeer(w,l);await this.dbPut("chunkCache",{id:l,value:b}),n.push({chunk:b,hash:l}),I=!0;break}catch(b){v=b,console.error(`Failed to fetch chunk ${l} from peer ${w}:`,b);continue}if(!I)throw v||new Error(`No available peer for chunk ${l}`)}const o=n.sort((l,u)=>{const p=K(l.chunk),m=K(u.chunk);return p-m}),s=[];for(const{chunk:l}of o){const u=await Ee(l,this.keypair.split(""));s.push(u)}const i=new Uint8Array(s.reduce((l,u)=>l+u.length,0));let a=0;for(const l of s)i.set(l,a),a+=l.length;const c=Ce(o[0].chunk);return{data:i,fileType:c}}catch(t){throw console.error("requestData failed:",t),t}}async fetchChunkFromPeer(e,t){const n=this.peers.get(e);if(!n||!n.connected||!n.conn)throw new Error(`Peer ${e} is not connected`);const o=`${e}-${t}-${Date.now()}`,s={type:"chunkRequest",requestId:o,chunkHash:t,peerId:this.peerId};return n.conn.send(s),new Promise((i,a)=>{this.pendingRequests.set(o,{resolve:i,reject:a,hash:t}),setTimeout(()=>{this.pendingRequests.has(o)&&(this.pendingRequests.delete(o),a(new Error(`Request for chunk ${t} from peer ${e} timed out`)))},1e4)})}handleChunkRequest(e,t){const{requestId:n,chunkHash:o}=e;this.dbGet("chunkCache",o).then(s=>{if(s&&s.value){const i={type:"chunkResponse",requestId:n,chunkHash:o,chunkData:s.value,peerId:this.peerId},a=this.peers.get(t);a&&a.connected&&a.conn&&(a.conn.send(i),console.log(`Sent chunk ${o} to peer ${t}`))}else console.warn(`Chunk ${o} not found for peer ${t}`)}).catch(s=>{console.error(`Failed to retrieve chunk ${o} for peer ${t}:`,s)})}handleChunkResponse均匀(e){const{requestId:t,chunkHash:n,chunkData:o}=e,s=this.pendingRequests.get(t);s&&(s.hash===n?s.resolve(o):s.reject(new Error(`Received chunk hash ${n} does not match requested hash ${s.hash}`)),this.pendingRequests.delete(t))}async distributeCommission(e){const t=Array.from(this.activeNodes).filter(o=>o.startsWith("node-"));if(t.length===0){console.log("No active nodes to distribute commission to.");return}const n=e/t.length;console.log(`Distributing commission of ${e} to ${t.length} nodes (${n} per node)`);for(const o of t){const s=o.replace("node-",""),i=this.base64UrlToUint8Array(s),c=await this.getBalance(i)+n;await this.putBalance(i,c),console.log(`Awarded ${n} to node ${o}. New balance: ${c}`);const l=this.peers.get(o);l&&l.connected&&l.conn&&l.conn.send({type:"commission",amount:n,newBalance:c,peerId:this.peerId})}}async getBalance(e){if(!this.db)throw new Error("IndexedDB not initialized");const t=await this.dbGet("store","balance_"+e);return t&&t.value?parseFloat(t.value):0}async putBalance(e,t){if(!this.db)throw new Error("IndexedDB not initialized");if(typeof t!="number"||t<0)throw new Error("Invalid balance amount");await this.dbPut("store",{id:"balance_"+e,value:t.toString()}),this.activeNodes.size>0&&this.broadcast({type:"userData",peerId:this.peerId,keypair:this.keypair,balance:t,timestamp:Date.now()})}async updateBalance(){if(!this.db)throw new Error("IndexedDB not initialized");const e=await this.getBalance(this.keypair);await this.putBalance(this.keypair,e)}async queueOfflineOperation(e){if(!this.db)throw new Error("IndexedDB not initialized");this.offlineQueue.push(e),await this.dbAdd("offlineQueue",{id:Date.now().toString(),value:e}),console.log("Queued offline operation:",e)}async processOfflineQueue(){if(this.offlineQueue.length===0)return;console.log("Processing offline queue...");const e=[...this.offlineQueue];this.offlineQueue=[];const n=this.db.transaction("offlineQueue","readwrite").objectStore("offlineQueue");await new Promise(o=>{n.clear().onsuccess=o});for(const o of e)try{switch(o.type){case"publishChunk":await this.publishChunk(o.chunkHash,o.chunkData,o.chunkIndex,o.totalChunks);break;case"publishIP":await this.broadcastIP(o.ipHash,o.metadata,o.chunkHashes);break;default:console.warn("Unknown offline operation type:",o.type)}}catch(s){console.error(`Failed to process offline operation ${o.type}:`,s),this.offlineQueue.push(o),await this.dbAdd("offlineQueue",{id:Date.now().toString(),value:o})}}async loadIdentity(){if(this.db)try{const e=await this.dbGet("store","dcrypt_identity");console.log(e+" HEYYYYY"),e&&e.value&&typeof e.value=="string"&&(this.keypair=this.base64UrlToUint8Array(e.value),console.log("Loaded identity from IndexedDB"),console.log(this.keypair))}catch(e){console.error("Failed to load identity:",e)}}async loadOfflineQueue(){if(this.db)try{const e=await this.dbGetAll("offlineQueue");this.offlineQueue=e.map(t=>t.value),console.log("Loaded offline queue:",this.offlineQueue)}catch(e){console.error("Failed to load offline queue:",e)}}async loadTransactions(){if(this.db)try{const e=await this.dbGetAll("transactions");console.log("Loaded transactions:",e)}catch(e){console.error("Failed to load transactions:",e)}}async dbPut(e,t){if(!this.db)throw new Error("IndexedDB not initialized");return new Promise((n,o)=>{const a=this.db.transaction(e,"readwrite").objectStore(e).put(t);a.onsuccess=()=>n(),a.onerror=c=>o(new Error(`DB put failed: ${c.target.error.message}`))})}async dbAdd(e,t){if(!this.db)throw new Error("IndexedDB not initialized");return new Promise((n,o)=>{const a=this.db.transaction(e,"readwrite").objectStore(e).add(t);a.onsuccess=()=>n(),a.onerror=c=>o(new Error(`DB add failed: ${c.target.error.message}`))})}async dbGet(e,t){if(!this.db)throw new Error("IndexedDB not initialized");return new Promise((n,o)=>{const a=this.db.transaction(e,"readonly").objectStore(e).get(t);a.onsuccess=()=>n(a.result),a.onerror=c=>o(new Error(`DB get failed: ${c.target.error.message}`))})}async dbGetAll(e){if(!this.db)throw new Error("IndexedDB not initialized");return new Promise((t,n)=>{const i=this.db.transaction(e,"readonly").objectStore(e).getAll();i.onsuccess=()=>t(i.result),i.onerror=a=>n(new Error(`DB getAll failed: ${a.target.error.message}`))})}broadcast(e){this.activeNodes.forEach(t=>{if(t!==this.peerId){const n=this.peers.get(t);n&&n.connected&&n.conn&&n.conn.send(e)}})}uint8ArrayToBase64Url(e){const t=String.fromCharCode(...e);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}base64UrlToUint8Array(e){let t=e.replace(/-/g,"+").replace(/_/g,"/");for(;t.length%4;)t+="=";const n=atob(t),o=n.length,s=new Uint8Array(o);for(let i=0;i<o;i++)s[i]=n.charCodeAt(i);return s}destroy(){this.peer&&!this.peer.destroyed&&(this.peer.destroy(),console.log("PeerJS peer destroyed")),this.peers.clear(),this.activeNodes.clear(),this.pendingRequests.clear()}}function $e(r){const e=String.fromCharCode(...r);return btoa(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}let g=null,B=null,d=null,U=!1,x=0,q=!1,j=!1;async function se(){console.log("Starting Firebase initialization...");try{const r=await be(()=>Promise.resolve().then(()=>Be),void 0);g=r.auth,B=r.db,await de(g,ue),console.log("Firebase services initialized successfully with local persistence"),console.log("Auth object:",g),console.log("Current Firebase user on init:",g.currentUser)}catch(r){throw console.error("Failed to initialize Firebase services:",r),h("Failed to initialize Firebase. Please try again later.",!0),r}}function Te(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,r=>{const e=Math.random()*16|0;return(r==="x"?e:e&3|8).toString(16)})}function F(){return!!(g!=null&&g.currentUser)||localStorage.getItem("role")==="node"}function h(r,e=!1){const t=document.getElementById("toast");t&&(t.textContent=r,t.className="toast",e&&t.classList.add("error-toast"),t.style.display="block",setTimeout(()=>{t.style.display="none"},3e3))}function y(r,e){const t=document.getElementById("background-loading");if(!t){console.error("Loading element #background-loading not found");return}r&&!e?(t.style.display="block",t.style.opacity=1):r&&e?Ne(t):Ue(t)}function Ne(r){var e=0,t=document.getElementById("loadingTextBox");t.style.opacity=e,r.style.opacity=e,r.style.display="block";var n=setInterval(function(){e+=.1,e>=1&&(e=1,clearInterval(n)),r.style.opacity=e,t.style.opacity=e,r.style.filter="alpha(opacity="+e*100+")",t.style.filter="alpha(opacity="+e*100+")"},50)}function Ue(r){var e=document.getElementById("loadingTextBox"),t=1,n=setInterval(function(){t-=.1,t<=0&&(t=0,r.style.display="none",clearInterval(n)),r.style.opacity=t,e.style.opacity=t,r.style.filter="alpha(opacity="+t*100+")",e.style.filter="alpha(opacity="+t*100+")"},50)}function C(){var e;const r={publishedItemsTableBody:(e=document.getElementById("publishedItems"))==null?void 0:e.querySelector("tbody"),transactionList:document.getElementById("transactionList"),userBalanceElement:document.getElementById("userBalance")};r.publishedItemsTableBody&&(r.publishedItemsTableBody.innerHTML=""),r.transactionList&&(r.transactionList.innerHTML="No transactions yet."),r.userBalanceElement&&(r.userBalanceElement.textContent="Balance: 0 DCT"),x=0}async function A(){const r=document.getElementById("userBalance");if(r){if(!d){r.textContent="Balance: 0 DCT",x=0;return}try{x=await d.getBalance(d.keypair)||0,r.textContent=`Balance: ${x} DCT`}catch(e){console.error("Failed to update balance:",e),r.textContent="Balance: 0 DCT",x=0}}}async function $(){const r=document.getElementById("transactionList");if(r){if(!d){r.innerHTML="Not initialized.";return}try{const e=await d.dbGetAll("transactions");if(e.length===0){r.innerHTML="No transactions yet.";return}r.innerHTML=e.map(t=>`<p class="py-1">${t.type} - ${t.amount} DCT - ${new Date(t.timestamp).toLocaleString()}</p>`).join("")}catch(e){console.error("Failed to update transaction history:",e),r.innerHTML="Failed to load transactions."}}}async function L(){var e;const r=(e=document.getElementById("publishedItems"))==null?void 0:e.querySelector("tbody");if(r){r.innerHTML="";try{const t=await _(M(B,"snippets")),n={};t.forEach(o=>{n[o.id]=o.data()}),d&&d.knownObjects.forEach((o,s)=>{const i=n[s]||{averageRating:0,reviewStatus:"active"};if(i.reviewStatus!=="active")return;const c=(o.metadata.isPremium||!1)&&o.metadata.priceUsd||0,l=c>0?`${c} DCT`:"Free",u=document.createElement("tr");u.innerHTML=`
          <td class="py-2 px-4">${o.metadata.content_type}</td>
          <td class="py-2 px-4">${o.metadata.description||"No description"}</td>
          <td class="py-2 px-4">${o.metadata.tags.join(", ")||"No tags"}</td>
          <td class="py-2 px-4">${i.averageRating} / 5</td>
          <td class="py-2 px-4">
            <button onclick="window.buySnippet('${s}')" class="bg-purple-500 text-white rounded hover:bg-purple-600 px-3 py-1 mr-2">Get (${l})</button>
            <button onclick="window.flagSnippet('${s}')" class="bg-red-500 text-white rounded hover:bg-red-600 px-3 py-1">Flag</button>
          </td>
        `,r.appendChild(u)})}catch(t){console.error("Failed to update live feed:",t),h("Failed to load live feed.",!0)}}}async function T(){var e;const r=((e=g.currentUser)==null?void 0:e.uid)||localStorage.getItem("nodeId");if(r)try{const t=D(B,"users",r),n=d?await d.getBalance(d.keypair):0;await R(t,{balance:n,lastUpdated:Date.now()},{merge:!0}),console.log("User data uploaded to Firebase")}catch(t){console.error("Failed to upload user data to Firebase:",t)}}function Re(){const r=document.getElementById("transactionHistory");r&&(r.style.display=r.style.display==="none"?"block":"none")}function Fe(r,e,t){const n=document.getElementById("snippetDisplay");if(!n)return;n.innerHTML="";const o=document.createElement("div");o.className="p-4 bg-gray-800 rounded-lg mt-4";const s=document.createElement("h3");if(s.className="text-lg font-semibold mb-2",s.textContent=t||"Snippet Content",o.appendChild(s),e.startsWith("text")){const i=new TextDecoder().decode(r),a=document.createElement("pre");a.className="text-sm text-gray-300 whitespace-pre-wrap",a.textContent=i,o.appendChild(a)}else if(e.startsWith("image")){const i=new Blob([r],{type:e}),a=URL.createObjectURL(i),c=document.createElement("img");c.src=a,c.className="max-w-full h-auto rounded",c.onload=()=>URL.revokeObjectURL(a),o.appendChild(c)}else{const i=new Blob([r],{type:e}),a=URL.createObjectURL(i),c=document.createElement("a");c.href=a,c.download=t||"downloaded_file",c.className="text-blue-400 hover:underline",c.textContent="Download File",c.onclick=()=>setTimeout(()=>URL.revokeObjectURL(a),1e3),o.appendChild(c)}n.appendChild(o)}function Le(){const r=document.getElementById("isPremium"),e=document.getElementById("priceInput");r&&e&&r.addEventListener("change",t=>{console.log("Premium toggle:",t.target.checked),e.classList.toggle("hidden",!t.target.checked),t.target.checked||(e.value="")})}async function G(){return new Promise((e,t)=>{console.log("Starting IndexedDB initialization...");const n=indexedDB.open("dcrypt_db");n.onsuccess=()=>{const o=n.result,s=o.version;console.log("Current IndexedDB version:",s),o.close();const i=indexedDB.open("dcrypt_db",Math.max(s,5));i.onupgradeneeded=a=>{const c=i.result;console.log("Upgrading database to version",5),c.objectStoreNames.contains("store")||(c.createObjectStore("store",{keyPath:"id"}),console.log("Created object store: store")),c.objectStoreNames.contains("transactions")||(c.createObjectStore("transactions",{keyPath:"id",autoIncrement:!0}),console.log("Created object store: transactions")),c.objectStoreNames.contains("offlineQueue")||(c.createObjectStore("offlineQueue",{keyPath:"id",autoIncrement:!0}),console.log("Created object store: offlineQueue")),c.objectStoreNames.contains("chunkCache")||(c.createObjectStore("chunkCache",{keyPath:"id"}),console.log("Created object store: chunkCache")),console.log("Database upgrade completed")},i.onsuccess=()=>{const a=i.result;console.log("IndexedDB opened successfully at version",a.version),e(a)},i.onerror=()=>{console.error("Failed to open IndexedDB:",i.error),t(new Error(`Failed to open IndexedDB: ${i.error.message}`))}},n.onerror=()=>{console.error("Failed to check IndexedDB version:",n.error),t(new Error(`Failed to check IndexedDB version: ${n.error.message}`))}})}async function ie(r){return new Promise((e,t)=>{try{const s=r.transaction("store","readonly").objectStore("store").get("dcrypt_identity");s.onsuccess=()=>{var a;const i=(a=s.result)==null?void 0:a.value;i&&typeof i=="string"?(console.log("Loaded keypair from IndexedDB:",i),console.log("Keypair length:",i.length),console.log("Is valid UID:",/^[a-zA-Z0-9]{20,40}$/.test(i)?"Yes":"No (possibly invalid or oversized)"),e(i)):(console.log("No valid keypair found in IndexedDB."),e(null))},s.onerror=()=>{console.error("Failed to load keypair from IndexedDB:",s.error),t(new Error("Failed to load keypair from IndexedDB"))}}catch(n){console.error('Error accessing "store" object store:',n),t(n)}})}async function J(r,e){return new Promise((t,n)=>{try{console.log("Storing keypair in IndexedDB:",e),console.log("Keypair length:",e.length),console.log("Production readiness:",e.length<=40?"Good (compact UID)":"Warning (potentially too large)");const i=r.transaction("store","readwrite").objectStore("store").put({id:"dcrypt_identity",value:e});i.onsuccess=()=>{console.log("Successfully stored keypair in IndexedDB"),t()},i.onerror=()=>{console.error("Failed to store keypair in IndexedDB:",i.error),n(new Error("Failed to store keypair in IndexedDB"))}}catch(o){console.error('Error storing keypair in "store" object store:',o),n(o)}})}async function V(r){if(j){console.log("Initialization already in progress, skipping...");return}j=!0,console.log("Initializing app with userId:",r);try{const e=await G();let t=await ie(e);if(t instanceof Uint8Array&&(t=$e(t),console.log("GOT HERE: KEYPAIR: "+t)),!t&&r)console.log("No keypair found, using userId as keypair:",r),await J(e,r),t=r;else if(t)t.length>40&&(console.warn("Existing keypair is unusually large:",t.length,"characters. Overwriting with userId."),t=r,await J(e,r));else throw new Error("No keypair available and no userId provided to create one");U=await ze(r),console.log(`User is ${U?"":"not "}a node.`),console.log("Initializing DHT with keypair:",t),console.log("Keypair length for DHT:",t.length),d=new Ae(t,U),window.dht=d,await d.initDB(),console.log("DHT database initialized."),await d.initSwarm(),console.log("DHT swarm initialized."),await d.syncUserData(),console.log("User data synced."),await Promise.all([L(),A(),$()]),console.log("UI updated.")}catch(e){console.error("Error initializing application:",e),e.message.includes("ID conflict")?h("Failed to connect to the network due to an ID conflict. Please try signing out and signing in again.",!0):h(`Initialization failed: ${e.message}`,!0),d&&d.destroy(),d=null,window.dht=null,x=0,C()}finally{Le(),j=!1}T()}async function ze(r){try{const e=D(B,"nodes",r);return(await te(e)).exists()}catch(e){return console.error("Failed to check node status:",e),!1}}async function Oe(){if(console.log("handleSignup function called"),q){console.log("Signup already in progress, ignoring additional clicks");return}q=!0;const r=document.getElementById("signupButton");r&&(r.disabled=!0,r.textContent="Signing Up...",console.log("Signup button disabled and text updated")),localStorage.setItem("pendingRole","user");try{console.log("Auth state before signInWithPopup in handleSignup:",g);const e=new X;console.log("Initiating signInWithPopup for signup");const t=await ee(g,e);console.log("Sign-up successful, user:",t.user),window.location.href="/datasharingApp/"}catch(e){console.error("Signup failed:",e),h(`Sign-up failed: ${e.message}`,!0),q=!1,r&&(r.disabled=!1,r.textContent="Sign Up with Google")}localStorage.removeItem("pendingRole")}async function qe(r){if(!F()){h("Please sign in to deposit.");return}y(!0);try{if(!d)throw new Error("DHT not initialized");if(!r||r<=0)throw new Error("Invalid deposit amount");const t=await d.getBalance(d.keypair)+r;await d.putBalance(d.keypair,t),await d.dbAdd("transactions",{type:"deposit",amount:r,timestamp:Date.now()}),h(`Deposited ${r} DCT successfully!`),await Promise.all([$(),A(),T()])}catch(e){console.error("deposit failed:",e),h(`Deposit failed: ${e.message}`,!0)}finally{y(!1)}}async function je(r){if(!F()){h("Please sign in to withdraw.");return}y(!0);try{if(!d)throw new Error("DHT not initialized");if(!r||r<=0)throw new Error("Invalid withdrawal amount");const e=await d.getBalance(d.keypair);if(e<r)throw new Error("Insufficient balance");await d.putBalance(d.keypair,e-r),await d.dbAdd("transactions",{type:"withdraw",amount:r,timestamp:Date.now()}),h(`Withdrew ${r} DCT successfully!`),await Promise.all([$(),A(),T()])}catch(e){console.error("withdraw failed:",e),h(`Withdrawal failed: ${e.message}`,!0)}finally{y(!1)}}async function He(){console.log("signIn function called");try{g||(console.error("Firebase Auth is not initialized, initializing now..."),await se()),console.log("Auth state before signInWithPopup:",g);const r=new X;console.log("Initiating signInWithPopup"),y(!0,!0);const e=await ee(g,r);console.log("Sign-in successful, user:",e.user)}catch(r){console.error("Login failed:",r),h(`Login failed: ${r.message}`,!0)}finally{y(!1)}}async function Y(){console.log("signOutUser function called");try{localStorage.getItem("role")==="node"?(localStorage.removeItem("nodeId"),localStorage.removeItem("role"),h("Node signed out successfully!")):(await he(g),h("Signed out successfully!")),d&&(d.destroy(),d=null,window.dht=null);const t=(await G()).transaction("store","readwrite").objectStore("store");await new Promise((n,o)=>{const s=t.delete("dcrypt_identity");s.onsuccess=()=>{console.log("Successfully deleted keypair from IndexedDB"),n()},s.onerror=()=>{console.error("Failed to delete keypair from IndexedDB:",s.error),o(new Error("Failed to delete keypair from IndexedDB"))}}),x=0,C()}catch(r){console.error("Sign-out failed:",r),h(`Sign-out failed: ${r.message}`,!0)}}async function _e(r,e,t,n,o){var s,i;if(!F()){h("Please sign in to publish.");return}y(!0,!0);try{if(!d)throw new Error("DHT not initialized");if(!r)throw new Error("Title is required");let a=n||"",c="text/plain";if((s=o==null?void 0:o.files)!=null&&s.length){const w=o.files[0];c=w.type||"application/octet-stream",a=await new Promise((b,S)=>{const P=new FileReader;P.onload=N=>b(new Uint8Array(N.target.result)),P.onerror=()=>S(new Error("Failed to read file")),P.readAsArrayBuffer(w)})}else a=new TextEncoder().encode(a);const l=document.getElementById("isPremium").checked,u=document.getElementById("priceInput"),p=l&&u&&parseFloat(u.value)||0,m={content_type:r,description:e||"",tags:t?t.split(",").map(w=>w.trim()):[],isPremium:l,priceUsd:p},k=await d.publishIP(m,a,c),I=((i=g.currentUser)==null?void 0:i.uid)||localStorage.getItem("nodeId"),v=D(B,"snippets",k);await R(v,{ipHash:k,flagCount:0,averageRating:0,reviewStatus:"active",createdAt:Date.now(),creatorId:I},{merge:!0}),h("Snippet published successfully!"),await Promise.all([L(),$(),A(),T()])}catch(a){console.error("publishSnippet failed:",a),h(`Publish failed: ${a.message}`,!0)}finally{y(!1)}}async function ae(r){if(!F())return h("Please sign in to buy."),null;y(!0,!0);try{if(!d)throw new Error("DHT not initialized");if(!r)throw new Error("Hash is required");const e=d.knownObjects.get(r);if(!e)throw new Error("Snippet not found");const o=(e.metadata.isPremium||!1)&&e.metadata.priceUsd||0;if(o>0){const c=await d.getBalance(d.keypair);if(c<o)throw new Error("Insufficient balance");const l=o*.05;await d.distributeCommission(l),await d.putBalance(d.keypair,c-o),await d.dbAdd("transactions",{type:"buy",amount:o,timestamp:Date.now()})}else console.log("This snippet is free!"),await d.dbAdd("transactions",{type:"buy",amount:0,timestamp:Date.now()});const{data:s,fileType:i}=await d.requestData(r);h("Snippet retrieved successfully!"),await Promise.all([$(),A(),T()]);const a=prompt("Please rate this snippet (1-5 stars):","5");if(a!==null){const c=parseInt(a);c>=1&&c<=5?(await Ge(r,c),h(`Rated ${c} stars!`),await L()):h("Invalid rating. Please enter a number between 1 and 5.",!0)}return Fe(s,i,e.metadata.content_type),{data:s,fileType:i}}catch(e){return console.error("buySnippet failed:",e),h(`Purchase failed: ${e.message}`,!0),null}finally{y(!1)}}async function Me(r){var n;const e=r||((n=document.getElementById("buyHashInput"))==null?void 0:n.value.trim());if(!e){h("Please enter a valid hash.",!0);return}await ae(e)&&h("Snippet purchased and displayed below!")}async function Ge(r,e){var n;const t=((n=g.currentUser)==null?void 0:n.uid)||localStorage.getItem("nodeId");if(t)try{const o=D(B,"snippets",r,"ratings",t);await R(o,{rating:e,timestamp:Date.now()});const i=(await _(M(B,"snippets",r,"ratings"))).docs.map(l=>l.data().rating),a=i.length>0?i.reduce((l,u)=>l+u,0)/i.length:0,c=D(B,"snippets",r);await H(c,{averageRating:a.toFixed(1)})}catch(o){console.error("Failed to submit rating:",o),h(`Failed to submit rating: ${o.message}`,!0)}}async function Qe(){const r=Te();console.log(r),localStorage.setItem("nodeId",r),localStorage.setItem("role","node");const e=D(B,"nodes",r);if(await R(e,{role:"node",createdAt:Date.now(),status:"active"},{merge:!0}),!window.location.pathname.includes("node-instructions.html")){console.log("Redirecting to node-instructions.html for node role"),window.location.href="/datasharingApp/node-instructions.html",y(!1);return}}async function We(r){var t;if(!(((t=g.currentUser)==null?void 0:t.uid)||localStorage.getItem("nodeId"))){h("Please sign in to flag content.");return}try{const n=D(B,"snippets",r);await H(n,{flagCount:ge(1)}),((await te(n)).data().flagCount||0)>=3?(await H(n,{reviewStatus:"under_review"}),h("Snippet has been flagged and is under review."),await L()):h("Snippet flagged. It will be reviewed if flagged by more users.")}catch(n){console.error("Failed to flag snippet:",n),h(`Failed to flag snippet: ${n.message}`,!0)}}document.addEventListener("DOMContentLoaded",async()=>{var o,s,i;console.log("DOMContentLoaded event fired"),console.log("Current pathname:",window.location.pathname),window.location.pathname.includes("signup")&&y(!1,!1);try{await se()}catch(a){console.error("Firebase initialization failed, aborting setup:",a),h("Firebase initialization failed. Please check your configuration.",!0);return}const r=localStorage.getItem("role"),e=localStorage.getItem("nodeId"),t=!(window.location.pathname.includes("node")||window.location.pathname.includes("signup.html"));if(console.log("isIndexPageL: NEFQOGN NIGGER: "+t),t&&r==="node"&&e){console.log("Node detected on index.html, redirecting to node-instructions.html"),y(!1,!0),window.location.href="/datasharingApp/node-instructions.html";return}if(t){y(!0);const a=new Promise(c=>setTimeout(c,3500));try{await Promise.all([new Promise(c=>{Q(g,async l=>{if(console.log("onAuthStateChanged triggered"),l)console.log("User is signed in:",l.uid),await V(l.uid);else{console.log("No user is signed in. Checking IndexedDB for keypair...");try{const u=await G(),p=await ie(u);p?(console.log("Found keypair in IndexedDB, initializing app..."),await V(p)):(console.log("No keypair found in IndexedDB."),C())}catch(u){console.error("Failed to initialize IndexedDB or load keypair:",u),C()}}c()},l=>{console.error("onAuthStateChanged error:",l),h("Failed to monitor authentication state.",!0),c()})}),a])}catch(c){console.error("Initialization error:",c),h("An error occurred during initialization.",!0)}finally{y(!1)}}const n={signupButton:document.getElementById("signupButton"),loginButton:document.getElementById("loginButton"),logoutButton:document.getElementById("logoutButton"),userBalanceElement:document.getElementById("userBalance"),publishButton:document.getElementById("publishButton"),searchButton:document.getElementById("searchButton"),depositButton:document.getElementById("depositButton"),withdrawButton:document.getElementById("withdrawButton"),toggleHistoryButton:document.getElementById("toggleHistoryButton"),transactionHistory:document.getElementById("transactionHistory"),publishedItemsTableBody:(o=document.getElementById("publishedItems"))==null?void 0:o.querySelector("tbody"),buyHashButton:document.getElementById("buyHashButton")};t?(console.log("On index.html, setting up UI and event listeners"),r==="node"&&e&&(U=!0,console.log("Node detected, but should have been redirected already.")),(s=n.loginButton)==null||s.addEventListener("click",a=>{a.preventDefault(),console.log("Login button clicked"),He()}),(i=n.logoutButton)==null||i.addEventListener("click",a=>{a.preventDefault(),console.log("Logout button clicked"),Y()}),t&&Q(g,a=>{var c,l,u,p,m,k;a?((c=n.signupButton)==null||c.classList.add("hidden"),(l=n.loginButton)==null||l.classList.add("hidden"),(u=n.logoutButton)==null||u.classList.remove("hidden"),n.publishButton.disabled=!1,n.searchButton.disabled=!1,n.depositButton.disabled=!1,n.withdrawButton.disabled=!1,n.toggleHistoryButton.disabled=!1,n.buyHashButton.disabled=!1):((p=n.signupButton)==null||p.classList.remove("hidden"),(m=n.loginButton)==null||m.classList.remove("hidden"),(k=n.logoutButton)==null||k.classList.add("hidden"),n.publishButton.disabled=!0,n.searchButton.disabled=!0,n.depositButton.disabled=!0,n.withdrawButton.disabled=!0,n.toggleHistoryButton.disabled=!0,n.buyHashButton.disabled=!0,C())})):console.log("Not on index.html, skipping index.html-specific setup"),window.logout=Y,window.publishSnippet=_e,window.buySnippet=ae,window.buySnippetByHash=Me,window.toggleTransactionHistory=Re,window.flagSnippet=We,window.handleSignup=Oe,window.becomeNode=Qe,window.deposit=qe,window.withdraw=je});
